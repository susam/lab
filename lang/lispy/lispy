#!/usr/bin/env python3

import enum
import functools
import operator
import re
import sys
import typing


class StrUpperEnum(enum.Enum):
    @staticmethod
    def _generate_next_value_(
        name: str, start: int, count: int, last_values: list[typing.Any]
    ) -> typing.Any:
        return name.upper()


Atom = int | float
List = list["Expr"]
Expr = Atom | List
Symbol = str


def tokenize(source: str) -> list[str]:
    return re.findall(r"\(|\)|[^\s()]+", source)


def parse(tokens: list[str]) -> tuple[Expr]:
    parsed, _ = parse_from_idx(tokens, 0)
    return parsed


def parse_from_idx(tokens: list[str], idx: int) -> tuple[Expr, int]:
    if idx == len(tokens):
        raise SyntaxError("Unexpected EOF")
    token = tokens[idx]
    idx += 1
    if token == "(":
        L = []
        while tokens[idx] != ")":
            parsed, idx = parse_from_idx(tokens, idx)
            L.append(parsed)
        return L, idx + 1
    elif token == ")":
        raise SyntaxError("Unexpected )")
    elif re.match(r"^-?\d+$", token):
        return int(token), idx
    elif re.match(r"^-?\d+.\d+$", token):
        return float(token), idx
    else:
        return token, idx  # symbol


def stdenv() -> dict[str, typing.Any]:
    return {
        "+": lambda *x: functools.reduce(operator.add, x),
        "*": lambda *x: functools.reduce(operator.mul, x),
        "-": lambda *x: functools.reduce(operator.sub, x),
        "/": lambda *x: functools.reduce(operator.div, x),
        "begin": lambda *x: x[-1],
        "length": len,
        "list": lambda *x: list(x),
    }


def eval(expr: Expr, env: dict = stdenv()) -> Expr:
    if isinstance(expr, str):
        return env[expr]
    if isinstance(expr, Atom):
        return expr
    if expr[0] == "if":
        _, test_expr, then_expr, else_expr = expr
        selected_expr = then_expr if eval(test_expr, env) else else_expr
        return eval(selected_expr, env)
    if expr[0] == "define":
        _, symbol, val_expr = expr
        env[symbol] = eval(val_expr, env)
        return

    func = eval(expr[0], env)
    args = [eval(arg, env) for arg in expr[1:]]
    result = func(*args)
    return result


def main():
    if len(sys.argv) == 1:
        source = sys.stdin.read()
    elif len(sys.argv) == 2:
        source = open(sys.argv[1]).read()
    else:
        print(f"Usage: {sys.argv[0]} [FILE]")
        sys.exit(1)

    print(eval(parse(tokenize(source))))


if __name__ == "__main__":
    main()
